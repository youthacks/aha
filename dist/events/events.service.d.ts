import { Repository } from 'typeorm';
import { Event } from './entities/event.entity';
import { EventMember } from './entities/event-member.entity';
import { Shop } from './entities/shop.entity';
import { Transaction } from './entities/transaction.entity';
import { CreateEventDto, JoinEventDto, UpdateTokensDto, PromoteMemberDto } from './dto/event.dto';
import { CreateStationDto, PurchaseDto, UpdateStationDto } from './dto/station.dto';
import { UpdateEventSettingsDto } from './dto/update-event-settings.dto';
export declare class EventsService {
    private eventsRepository;
    private membersRepository;
    private shopRepository;
    private transactionsRepository;
    constructor(eventsRepository: Repository<Event>, membersRepository: Repository<EventMember>, shopRepository: Repository<Shop>, transactionsRepository: Repository<Transaction>);
    generateSlug(name: string): string;
    generateJoinCode(): string;
    generateReceiptCode(): string;
    createEvent(userId: string, createEventDto: CreateEventDto): Promise<Event>;
    joinEvent(userId: string, joinEventDto: JoinEventDto): Promise<EventMember>;
    getMyEvents(userId: string): Promise<any[]>;
    getMyArchivedEvents(userId: string): Promise<any[]>;
    getEventDetails(eventId: string, userId: string): Promise<any>;
    updateTokens(eventId: string, adminId: string, updateDto: UpdateTokensDto): Promise<EventMember>;
    promoteMember(eventId: string, adminId: string, promoteDto: PromoteMemberDto): Promise<EventMember>;
    createStation(eventId: string, userId: string, createDto: CreateStationDto): Promise<Shop>;
    updateStation(eventId: string, stationId: string, userId: string, updateDto: UpdateStationDto): Promise<Shop>;
    deleteStation(eventId: string, stationId: string, userId: string): Promise<void>;
    purchase(eventId: string, userId: string, purchaseDto: PurchaseDto): Promise<Transaction>;
    redeemReceipt(eventId: string, receiptCode: string, redeemerUserId: string): Promise<any>;
    redeemReceiptBySlug(eventSlug: string, receiptCode: string, redeemerUserId: string): Promise<any>;
    getTransactions(eventId: string, userId: string): Promise<Transaction[]>;
    getAllTransactions(eventId: string, userId: string): Promise<any[]>;
    getEventDetailsBySlug(eventSlug: string, userId: string): Promise<any>;
    updateTokensBySlug(eventSlug: string, adminId: string, updateDto: UpdateTokensDto): Promise<EventMember>;
    promoteMemberBySlug(eventSlug: string, adminId: string, promoteDto: PromoteMemberDto): Promise<EventMember>;
    createStationBySlug(eventSlug: string, userId: string, createDto: CreateStationDto): Promise<Shop>;
    updateStationBySlug(eventSlug: string, stationId: string, userId: string, updateDto: UpdateStationDto): Promise<Shop>;
    deleteStationBySlug(eventSlug: string, stationId: string, userId: string): Promise<void>;
    purchaseBySlug(eventSlug: string, userId: string, purchaseDto: PurchaseDto): Promise<Transaction>;
    getTransactionsBySlug(eventSlug: string, userId: string): Promise<Transaction[]>;
    getAllTransactionsBySlug(eventSlug: string, userId: string): Promise<any[]>;
    archiveEvent(eventId: string, userId: string): Promise<Event>;
    unarchiveEvent(eventId: string, userId: string): Promise<Event>;
    archiveEventBySlug(eventSlug: string, userId: string): Promise<Event>;
    unarchiveEventBySlug(eventSlug: string, userId: string): Promise<Event>;
    deleteEventBySlug(eventSlug: string, userId: string): Promise<void>;
    deleteAll(): Promise<void>;
    deleteEvent(eventId: string, userId: string): Promise<void>;
    updateEventSettings(eventId: string, userId: string, updateDto: UpdateEventSettingsDto): Promise<Event>;
    updateEventSettingsBySlug(eventSlug: string, userId: string, updateDto: UpdateEventSettingsDto): Promise<Event>;
}
