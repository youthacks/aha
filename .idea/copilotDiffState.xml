<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/DELETE_DATA_COMMANDS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DELETE_DATA_COMMANDS.md" />
              <option name="updatedContent" value="# Quick Commands - Delete All Data&#10;&#10;## Delete All User Accounts&#10;&#10;**PowerShell:**&#10;```powershell&#10;Invoke-RestMethod -Uri &quot;http://localhost:3000/users/clear-all&quot; -Method DELETE&#10;```&#10;&#10;**Output:**&#10;```json&#10;{&#10;  &quot;message&quot;: &quot;Successfully deleted X user(s)&quot;,&#10;  &quot;success&quot;: true&#10;}&#10;```&#10;&#10;---&#10;&#10;## List All Users (Before Deleting)&#10;&#10;**PowerShell:**&#10;```powershell&#10;Invoke-RestMethod -Uri &quot;http://localhost:3000/users/list&quot; -Method GET&#10;```&#10;&#10;**Output:**&#10;```json&#10;{&#10;  &quot;count&quot;: 5,&#10;  &quot;users&quot;: [&#10;    { &quot;id&quot;: &quot;...&quot;, &quot;email&quot;: &quot;user@example.com&quot;, ... }&#10;  ]&#10;}&#10;```&#10;&#10;---&#10;&#10;## Delete All Events and Event Data&#10;&#10;Currently, events are tied to users through the database. When you delete all users, the events remain but become orphaned.&#10;&#10;**Option 1: Delete via SQL (Recommended)**&#10;&#10;Open pgAdmin and run:&#10;```sql&#10;DELETE FROM transactions;&#10;DELETE FROM buying_stations;&#10;DELETE FROM event_members;&#10;DELETE FROM events;&#10;```&#10;&#10;**Option 2: Delete via psql Command Line**&#10;```bash&#10;psql -U postgres -d aha_v2 -c &quot;DELETE FROM transactions; DELETE FROM buying_stations; DELETE FROM event_members; DELETE FROM events;&quot;&#10;```&#10;&#10;**Option 3: Recreate Entire Database**&#10;```bash&#10;psql -U postgres -c &quot;DROP DATABASE aha_v2; CREATE DATABASE aha_v2;&quot;&#10;```&#10;Then restart your backend server - it will recreate all tables automatically.&#10;&#10;---&#10;&#10;## Complete Reset (Everything)&#10;&#10;**Delete ALL data and start fresh:**&#10;&#10;```bash&#10;psql -U postgres -c &quot;DROP DATABASE aha_v2; CREATE DATABASE aha_v2;&quot;&#10;```&#10;&#10;Then restart backend:&#10;```bash&#10;npm run start:dev&#10;```&#10;&#10;All tables will be recreated empty.&#10;&#10;---&#10;&#10;## Notes&#10;&#10;⚠️ **Warning:** These actions are permanent and cannot be undone!&#10;&#10; **Security:** The `/users/clear-all` endpoint only works in development mode (NODE_ENV=development)&#10;&#10; **Backup:** Consider backing up your database first:&#10;```bash&#10;pg_dump -U postgres aha_v2 &gt; backup_$(date +%Y%m%d).sql&#10;```&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/EMAIL_CONFIG.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/EMAIL_CONFIG.md" />
              <option name="updatedContent" value="# Email Configuration Notes&#10;&#10;## Current Setup&#10;&#10;The backend sends verification and password reset emails with links that point to:&#10;`http://192.168.1.198:3001`&#10;&#10;This is configured in the `.env` file as `APP_URL`.&#10;&#10;## Why This Works&#10;&#10;- ✅ **Web App**: Works because you can access it at `http://192.168.1.198:3001` from any device on your network&#10;- ✅ **Mobile App**: The mobile app will handle the deep linking when you click email links on your phone&#10;&#10;## Important Notes&#10;&#10;1. **Web App Access**: If you want to access the web app from your phone's browser, use:&#10;   ```&#10;   http://192.168.1.198:3001&#10;   ```&#10;   Instead of `http://localhost:3001`&#10;&#10;2. **Email Links on Mobile**: When you click a verification link in the email on your phone:&#10;   - It will try to open in the browser first&#10;   - You can manually trigger the verification in the mobile app by copying the email and token from the URL&#10;&#10;## Alternative: Deep Linking (Future Enhancement)&#10;&#10;For a better mobile experience, you could configure deep linking so email links automatically open in the mobile app. This requires:&#10;1. Configuring Expo deep links&#10;2. Updating the email service to detect mobile users&#10;3. Sending different links for mobile vs web&#10;&#10;For now, the current setup works for both platforms when on the same network.&#10;&#10;## If Your IP Changes&#10;&#10;Remember to update `APP_URL` in `.env` if your computer's IP address changes:&#10;1. Run `ipconfig` to get your new IP&#10;2. Update `.env`: `APP_URL=http://YOUR_NEW_IP:3001`&#10;3. Restart the backend server&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/pages/EventDetails.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/EventDetails.tsx" />
              <option name="originalContent" value="import React, { useState, useEffect, useCallback } from 'react';&#10;import { useParams, useNavigate } from 'react-router-dom';&#10;import { eventsService, EventMember, Shop, Transaction, GlobalTransaction } from '../services/events.service';&#10;&#10;const EventDetails: React.FC = () =&gt; {&#10;  const { eventId } = useParams&lt;{ eventId: string }&gt;();&#10;  const navigate = useNavigate();&#10;  const [event, setEvent] = useState&lt;any&gt;(null);&#10;  const [members, setMembers] = useState&lt;EventMember[]&gt;([]);&#10;  const [shopItems, setShopItems] = useState&lt;Shop[]&gt;([]);&#10;  const [transactions, setTransactions] = useState&lt;Transaction[]&gt;([]);&#10;  const [globalTransactions, setGlobalTransactions] = useState&lt;GlobalTransaction[]&gt;([]);&#10;  const [myRole, setMyRole] = useState('');&#10;  const [myTokens, setMyTokens] = useState(0);&#10;  const [loading, setLoading] = useState(true);&#10;  const [activeTab, setActiveTab] = useState('overview');&#10;  const [error, setError] = useState('');&#10;  const [success, setSuccess] = useState('');&#10;&#10;  const [showTokenModal, setShowTokenModal] = useState(false);&#10;  const [selectedMember, setSelectedMember] = useState&lt;EventMember | null&gt;(null);&#10;  const [tokenAmount, setTokenAmount] = useState(0);&#10;  const [tokenOperation, setTokenOperation] = useState&lt;'add' | 'remove'&gt;('add');&#10;&#10;  const [showStationModal, setShowStationModal] = useState(false);&#10;  const [stationName, setStationName] = useState('');&#10;  const [stationPrice, setStationPrice] = useState(0);&#10;  const [stationDescription, setStationDescription] = useState('');&#10;  const [stationStock, setStationStock] = useState(0);&#10;  const [stationPurchaseLimit, setStationPurchaseLimit] = useState(0);&#10;  const [stationImageUrl, setStationImageUrl] = useState('');&#10;&#10;  const [showEditStationModal, setShowEditStationModal] = useState(false);&#10;  const [selectedStation, setSelectedStation] = useState&lt;Shop | null&gt;(null);&#10;  const [editStationName, setEditStationName] = useState('');&#10;  const [editStationPrice, setEditStationPrice] = useState(0);&#10;  const [editStationDescription, setEditStationDescription] = useState('');&#10;  const [editStationStock, setEditStationStock] = useState(0);&#10;  const [editStationPurchaseLimit, setEditStationPurchaseLimit] = useState(0);&#10;  const [editStationAvailable, setEditStationAvailable] = useState(true);&#10;  const [editStationImageUrl, setEditStationImageUrl] = useState('');&#10;&#10;  const [showDeleteStationModal, setShowDeleteStationModal] = useState(false);&#10;  const [deleteStationConfirmText, setDeleteStationConfirmText] = useState('');&#10;&#10;  const [showPromoteModal, setShowPromoteModal] = useState(false);&#10;  const [selectedRole, setSelectedRole] = useState('member');&#10;&#10;  const [showDeleteModal, setShowDeleteModal] = useState(false);&#10;  const [deleteConfirmText, setDeleteConfirmText] = useState('');&#10;&#10;  const [showReceiptModal, setShowReceiptModal] = useState(false);&#10;  const [selectedReceipt, setSelectedReceipt] = useState&lt;Transaction | null&gt;(null);&#10;&#10;  const [showScannerModal, setShowScannerModal] = useState(false);&#10;  const [scannerInput, setScannerInput] = useState('');&#10;&#10;  const [showSettingsModal, setShowSettingsModal] = useState(false);&#10;  const [settingsEventName, setSettingsEventName] = useState('');&#10;  const [settingsJoinCode, setSettingsJoinCode] = useState('');&#10;  const [settingsDescription, setSettingsDescription] = useState('');&#10;&#10;  const loadEventData = useCallback(async (silent = false) =&gt; {&#10;    try {&#10;      const data = await eventsService.getEventDetails(eventId!);&#10;      setEvent(data.event);&#10;      setMembers(data.members);&#10;      setShopItems(data.stations);&#10;      setMyRole(data.myRole);&#10;      setMyTokens(data.myTokens);&#10;&#10;      const txns = await eventsService.getTransactions(eventId!);&#10;      setTransactions(txns);&#10;&#10;      // Load global transactions if user is admin or manager&#10;      if (data.myRole === 'admin' || data.myRole === 'manager') {&#10;        try {&#10;          const allTxns = await eventsService.getAllTransactions(eventId!);&#10;          setGlobalTransactions(allTxns);&#10;        } catch (err) {&#10;          // Silently fail if user doesn't have permission&#10;        }&#10;      }&#10;    } catch (err: any) {&#10;      if (!silent) {&#10;        setError(err.response?.data?.message || 'Failed to load event');&#10;      }&#10;    } finally {&#10;      if (!silent) {&#10;        setLoading(false);&#10;      }&#10;    }&#10;  }, [eventId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (eventId) {&#10;      loadEventData();&#10;&#10;      // Set up polling to refresh data every 3 seconds&#10;      const interval = setInterval(() =&gt; {&#10;        loadEventData(true); // silent refresh&#10;      }, 3000);&#10;&#10;      // Cleanup interval on unmount&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [eventId, loadEventData]);&#10;&#10;  const handleUpdateTokens = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedMember) return;&#10;&#10;    try {&#10;      const finalAmount = tokenOperation === 'remove' ? -tokenAmount : tokenAmount;&#10;      await eventsService.updateTokens(eventId!, selectedMember.userId, finalAmount);&#10;      setSuccess(`Updated tokens for ${selectedMember.name}`);&#10;      setShowTokenModal(false);&#10;      setTokenAmount(0);&#10;      setTokenOperation('add');&#10;      setSelectedMember(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update tokens');&#10;    }&#10;  };&#10;&#10;  const handlePromote = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedMember) return;&#10;&#10;    try {&#10;      await eventsService.promoteMember(eventId!, selectedMember.userId, selectedRole);&#10;      setSuccess(`Promoted ${selectedMember.name} to ${selectedRole}`);&#10;      setShowPromoteModal(false);&#10;      setSelectedMember(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to promote member');&#10;    }&#10;  };&#10;&#10;  const handleCreateStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    try {&#10;      await eventsService.createStation(eventId!, stationName, stationPrice, stationDescription, stationStock, stationImageUrl, stationPurchaseLimit || undefined);&#10;      setSuccess('Shop item created!');&#10;      setShowStationModal(false);&#10;      setStationName('');&#10;      setStationPrice(0);&#10;      setStationDescription('');&#10;      setStationStock(0);&#10;      setStationPurchaseLimit(0);&#10;      setStationImageUrl('');&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to create shop item');&#10;    }&#10;  };&#10;&#10;  const handleEditStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedStation) return;&#10;&#10;    try {&#10;      await eventsService.updateStation(eventId!, selectedStation.id, {&#10;        name: editStationName,&#10;        price: editStationPrice,&#10;        description: editStationDescription,&#10;        stock: editStationStock,&#10;        purchaseLimit: editStationPurchaseLimit || undefined,&#10;        isAvailable: editStationAvailable,&#10;        imageUrl: editStationImageUrl,&#10;      });&#10;      setSuccess('Shop item updated!');&#10;      setShowEditStationModal(false);&#10;      setSelectedStation(null);&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update shop item');&#10;    }&#10;  };&#10;&#10;  const handlePurchase = async (stationId: string, stationName: string) =&gt; {&#10;    if (!window.confirm(`Purchase ${stationName}?`)) return;&#10;&#10;    try {&#10;      const receipt = await eventsService.purchase(eventId!, stationId);&#10;      setSuccess(`Successfully purchased ${stationName}!`);&#10;      setSelectedReceipt(receipt);&#10;      setShowReceiptModal(true);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Purchase failed');&#10;    }&#10;  };&#10;&#10;  const handleRedeemReceipt = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!scannerInput.trim()) return;&#10;&#10;    try {&#10;      const result = await eventsService.redeemReceipt(eventId!, scannerInput.trim());&#10;      setSuccess(`Receipt redeemed successfully! Item: ${result.transaction.itemName}, Buyer: ${result.transaction.buyerName}`);&#10;      setShowScannerModal(false);&#10;      setScannerInput('');&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to redeem receipt');&#10;    }&#10;  };&#10;&#10;  const handleDeleteEvent = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (deleteConfirmText !== event.name) {&#10;      setError('Event name does not match. Please type the exact event name.');&#10;      return;&#10;    }&#10;&#10;    try {&#10;      await eventsService.deleteEvent(eventId!);&#10;      setSuccess('Event deleted successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to delete event');&#10;    }&#10;  };&#10;&#10;  const handleDeleteStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (deleteStationConfirmText !== selectedStation?.name) {&#10;      setError('Shop item name does not match. Please type the exact shop item name.');&#10;      return;&#10;    }&#10;&#10;    try {&#10;      await eventsService.deleteStation(eventId!, selectedStation!.id);&#10;      setSuccess('Shop item deleted successfully.');&#10;      setShowDeleteStationModal(false);&#10;      setDeleteStationConfirmText('');&#10;      setSelectedStation(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to delete shop item');&#10;    }&#10;  };&#10;&#10;  const handleArchiveEvent = async () =&gt; {&#10;    if (!window.confirm(`Archive &quot;${event.name}&quot;? It will be moved to your archived events.`)) return;&#10;&#10;    try {&#10;      await eventsService.archiveEvent(eventId!);&#10;      setSuccess('Event archived successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to archive event');&#10;    }&#10;  };&#10;&#10;  const handleUnarchiveEvent = async () =&gt; {&#10;    if (!window.confirm(`Unarchive &quot;${event.name}&quot;? It will be moved back to your active events.`)) return;&#10;&#10;    try {&#10;      await eventsService.unarchiveEvent(eventId!);&#10;      setSuccess('Event unarchived successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to unarchive event');&#10;    }&#10;  };&#10;&#10;  const handleUpdateEventSettings = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    setSuccess('');&#10;&#10;    try {&#10;      await eventsService.updateEventSettings(eventId!, {&#10;        name: settingsEventName !== event.name ? settingsEventName : undefined,&#10;        joinCode: settingsJoinCode !== event.joinCode ? settingsJoinCode : undefined,&#10;        description: settingsDescription,&#10;      });&#10;      setSuccess('Event settings updated successfully!');&#10;      setShowSettingsModal(false);&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update event settings');&#10;    }&#10;  };&#10;&#10;  const openTokenModal = (member: EventMember) =&gt; {&#10;    setSelectedMember(member);&#10;    setTokenAmount(0);&#10;    setTokenOperation('add');&#10;    setShowTokenModal(true);&#10;  };&#10;&#10;  const openPromoteModal = (member: EventMember) =&gt; {&#10;    setSelectedMember(member);&#10;    setSelectedRole(member.role);&#10;    setShowPromoteModal(true);&#10;  };&#10;&#10;  const openEditStationModal = (station: Shop) =&gt; {&#10;    setSelectedStation(station);&#10;    setEditStationName(station.name);&#10;    setEditStationPrice(station.price);&#10;    setEditStationDescription(station.description || '');&#10;    setEditStationStock(station.stock);&#10;    setEditStationAvailable(station.isAvailable);&#10;    setEditStationImageUrl(station.imageUrl || '');&#10;    setEditStationPurchaseLimit(station.purchaseLimit || 0);&#10;    setShowEditStationModal(true);&#10;  };&#10;&#10;  const openDeleteStationModal = (station: Shop) =&gt; {&#10;    setSelectedStation(station);&#10;    setDeleteStationConfirmText('');&#10;    setShowDeleteStationModal(true);&#10;  };&#10;&#10;  const openSettingsModal = () =&gt; {&#10;    setSettingsEventName(event.name);&#10;    setSettingsJoinCode(event.joinCode);&#10;    setSettingsDescription(event.description || '');&#10;    setShowSettingsModal(true);&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;dashboard-container&quot;&gt;&lt;div className=&quot;loading&quot;&gt;Loading event...&lt;/div&gt;&lt;/div&gt;;&#10;  }&#10;&#10;  if (!event) {&#10;    return &lt;div className=&quot;dashboard-container&quot;&gt;&lt;div className=&quot;alert alert-error&quot;&gt;Event not found&lt;/div&gt;&lt;/div&gt;;&#10;  }&#10;&#10;  const canManage = myRole === 'admin' || myRole === 'manager';&#10;  const isAdmin = myRole === 'admin';&#10;  const isRegularMember = myRole === 'member';&#10;&#10;  return (&#10;    &lt;div className=&quot;dashboard-container&quot;&gt;&#10;      &lt;div className=&quot;dashboard-card&quot;&gt;&#10;        &lt;div className=&quot;dashboard-header&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;button onClick={() =&gt; navigate('/dashboard')} className=&quot;back-button&quot;&gt;← Back&lt;/button&gt;&#10;            &lt;h1 style={{ marginTop: '10px' }}&gt;{event.name}&lt;/h1&gt;&#10;            &lt;p style={{ color: '#666', fontSize: '14px' }}&gt;&#10;              Join Code: &lt;strong style={{ fontFamily: 'monospace', fontSize: '16px', letterSpacing: '1px' }}&gt;{event.joinCode}&lt;/strong&gt;&#10;              {isAdmin &amp;&amp; (&#10;                &lt;button&#10;                  onClick={openSettingsModal}&#10;                  style={{&#10;                    marginLeft: '10px',&#10;                    padding: '4px 12px',&#10;                    fontSize: '12px',&#10;                    background: '#667eea',&#10;                    color: 'white',&#10;                    border: 'none',&#10;                    borderRadius: '6px',&#10;                    cursor: 'pointer',&#10;                    fontWeight: '600'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#5a67d8'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#667eea'}&#10;                &gt;&#10;                  ⚙️ Settings&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div style={{ textAlign: 'right' }}&gt;&#10;            &lt;div style={{ fontSize: '14px', color: '#666' }}&gt;My Tokens&lt;/div&gt;&#10;            &lt;div style={{ fontSize: '32px', fontWeight: 'bold', color: '#667eea' }}&gt;{myTokens} &lt;/div&gt;&#10;            &lt;span className={`role-badge role-${myRole}`}&gt;{myRole}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; &lt;div className=&quot;alert alert-error&quot;&gt;{error}&lt;/div&gt;}&#10;        {success &amp;&amp; &lt;div className=&quot;alert alert-success&quot;&gt;{success}&lt;/div&gt;}&#10;&#10;        &lt;div className=&quot;tabs&quot;&gt;&#10;          &lt;button className={activeTab === 'overview' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('overview')}&gt;&#10;            Overview&#10;          &lt;/button&gt;&#10;          &lt;button className={activeTab === 'members' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('members')}&gt;&#10;            Members ({members.length})&#10;          &lt;/button&gt;&#10;          &lt;button className={activeTab === 'shop' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('shop')}&gt;&#10;            Shop ({shopItems.length})&#10;          &lt;/button&gt;&#10;          {canManage &amp;&amp; (&#10;            &lt;button className={activeTab === 'global-history' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('global-history')}&gt;&#10;              Global History&#10;            &lt;/button&gt;&#10;          )}&#10;          &lt;button className={activeTab === 'history' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('history')}&gt;&#10;            My History&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;tab-content&quot;&gt;&#10;          {activeTab === 'overview' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;stats-grid&quot;&gt;&#10;                &lt;div className=&quot;stat-card&quot;&gt;&#10;                  &lt;div className=&quot;stat-value&quot;&gt;{members.length}&lt;/div&gt;&#10;                  &lt;div className=&quot;stat-label&quot;&gt;Members&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;stat-card&quot;&gt;&#10;                  &lt;div className=&quot;stat-value&quot;&gt;{shopItems.length}&lt;/div&gt;&#10;                  &lt;div className=&quot;stat-label&quot;&gt;Shop Items&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                {isRegularMember &amp;&amp; (&#10;                  &lt;div className=&quot;stat-card&quot;&gt;&#10;                    &lt;div className=&quot;stat-value&quot;&gt;{myTokens}&lt;/div&gt;&#10;                    &lt;div className=&quot;stat-label&quot;&gt;My Tokens&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              &lt;h3 style={{ marginTop: '30px', marginBottom: '15px' }}&gt;Leaderboard&lt;/h3&gt;&#10;              &lt;div className=&quot;leaderboard&quot;&gt;&#10;                {members.filter(m =&gt; m.role === 'member').slice(0, 10).map((member, index) =&gt; (&#10;                  &lt;div key={member.id} className=&quot;leaderboard-item&quot;&gt;&#10;                    &lt;div className=&quot;leaderboard-rank&quot;&gt;#{index + 1}&lt;/div&gt;&#10;                    &lt;div className=&quot;leaderboard-info&quot;&gt;&#10;                      &lt;div className=&quot;leaderboard-name&quot;&gt;{member.name}&lt;/div&gt;&#10;                      &lt;span className={`role-badge role-${member.role}`}&gt;{member.role}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;leaderboard-tokens&quot;&gt;{member.tokens} &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'members' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ marginBottom: '20px' }}&gt;&#10;                &lt;h3&gt;Event Members&lt;/h3&gt;&#10;                {canManage &amp;&amp; &lt;p style={{ fontSize: '14px', color: '#666' }}&gt;You can manage tokens and roles&lt;/p&gt;}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;members-list&quot;&gt;&#10;                {members.map(member =&gt; (&#10;                  &lt;div key={member.id} className=&quot;member-card&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;member-name&quot;&gt;{member.name}&lt;/div&gt;&#10;                      &lt;div className=&quot;member-email&quot;&gt;{member.email}&lt;/div&gt;&#10;                      &lt;span className={`role-badge role-${member.role}`}&gt;{member.role}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}&gt;&#10;                      &lt;div className=&quot;member-tokens&quot;&gt;{member.tokens} &lt;/div&gt;&#10;                      {canManage &amp;&amp; (&#10;                        &lt;div style={{ display: 'flex', gap: '5px' }}&gt;&#10;                          &lt;button onClick={() =&gt; openTokenModal(member)} className=&quot;btn-small&quot;&gt;&#10;                            Tokens&#10;                          &lt;/button&gt;&#10;                          {isAdmin &amp;&amp; member.role !== 'admin' &amp;&amp; (&#10;                            &lt;button onClick={() =&gt; openPromoteModal(member)} className=&quot;btn-small btn-secondary-small&quot;&gt;&#10;                              Role&#10;                            &lt;/button&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'shop' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}&gt;&#10;                &lt;h3&gt;Shop&lt;/h3&gt;&#10;                &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                  {canManage &amp;&amp; (&#10;                    &lt;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; navigate(`/events/${eventId}/bigscreen`)}&#10;                        className=&quot;btn-secondary&quot;&#10;                        style={{&#10;                          padding: '5px 15px',&#10;                          fontSize: '14px',&#10;                          width: 'auto',&#10;                        }}&#10;                      &gt;&#10;                         Big Screen Mode&#10;                      &lt;/button&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setShowStationModal(true)}&#10;                        className=&quot;btn-primary&quot;&#10;                        style={{&#10;                          padding: '5px 10px',&#10;                          fontSize: '17px',&#10;                          width: 'auto',&#10;                          float: 'right'&#10;                        }}&#10;                      &gt;&#10;                        + New Item&#10;                      &lt;/button&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {shopItems.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No shop items yet.&lt;/p&gt;&#10;                  {canManage &amp;&amp; &lt;p style={{ color: '#999', fontSize: '14px', marginTop: '10px' }}&gt;Create one to let members spend their tokens!&lt;/p&gt;}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;stations-grid&quot;&gt;&#10;                  {shopItems.map(station =&gt; (&#10;                    &lt;div key={station.id} className=&quot;station-card&quot;&gt;&#10;                      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '8px' }}&gt;&#10;                        &lt;h4 style={{ margin: 0, flex: 1 }}&gt;{station.name}&lt;/h4&gt;&#10;                        {canManage &amp;&amp; (&#10;                          &lt;div style={{ display: 'flex', gap: '5px' }}&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; openEditStationModal(station)}&#10;                              className=&quot;btn-small&quot;&#10;                              style={{ fontSize: '12px', padding: '4px 8px' }}&#10;                            &gt;&#10;                              ✏️&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; openDeleteStationModal(station)}&#10;                              className=&quot;btn-small btn-secondary-small&quot;&#10;                              style={{ fontSize: '12px', padding: '4px 8px', background: '#dc2626' }}&#10;                              onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#b91c1c'}&#10;                              onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#dc2626'}&#10;                            &gt;&#10;                              ️&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      {station.description &amp;&amp; &lt;p className=&quot;station-description&quot;&gt;{station.description}&lt;/p&gt;}&#10;                      &lt;div style={{ fontSize: '13px', color: '#666', marginTop: '8px', marginBottom: '8px' }}&gt;&#10;                        Stock: &lt;strong style={{ color: station.stock &gt; 0 ? '#059669' : '#dc2626' }}&gt;&#10;                          {station.stock &gt; 0 ? `${station.stock} available` : 'Out of stock'}&#10;                        &lt;/strong&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;station-footer&quot;&gt;&#10;                        &lt;div className=&quot;station-price&quot;&gt;{station.price} &lt;/div&gt;&#10;                        {station.isAvailable &amp;&amp; isRegularMember &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; handlePurchase(station.id, station.name)}&#10;                            className=&quot;btn-purchase&quot;&#10;                            disabled={myTokens &lt; station.price || station.stock &lt;= 0}&#10;                          &gt;&#10;                            {station.stock &lt;= 0 ? 'Out of Stock' : myTokens &lt; station.price ? 'Insufficient Tokens' : 'Purchase'}&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {!isRegularMember &amp;&amp; (&#10;                          &lt;span style={{ fontSize: '12px', color: '#999', fontStyle: 'italic' }}&gt;&#10;                            Members only&#10;                          &lt;/span&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'history' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}&gt;&#10;                &lt;h3 style={{ margin: 0 }}&gt;Transaction History&lt;/h3&gt;&#10;                {canManage &amp;&amp; (&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowScannerModal(true)}&#10;                    className=&quot;btn-primary&quot;&#10;                    style={{&#10;                      padding: '8px 16px',&#10;                      fontSize: '14px',&#10;                      width: 'auto',&#10;                    }}&#10;                  &gt;&#10;                     Redeem Receipt&#10;                  &lt;/button&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              {transactions.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No transactions yet.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;transactions-list&quot;&gt;&#10;                  {transactions.map(txn =&gt; (&#10;                    &lt;div key={txn.id} className=&quot;transaction-item&quot; style={{ flexDirection: 'column', alignItems: 'stretch', gap: '10px' }}&gt;&#10;                      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}&gt;&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;transaction-description&quot;&gt;{txn.description}&lt;/div&gt;&#10;                          &lt;div className=&quot;transaction-date&quot;&gt;{new Date(txn.createdAt).toLocaleString()}&lt;/div&gt;&#10;                          {txn.type === 'purchase' &amp;&amp; txn.receiptCode &amp;&amp; (&#10;                            &lt;div style={{ marginTop: '8px' }}&gt;&#10;                              &lt;div style={{ fontSize: '11px', color: '#666', marginBottom: '4px' }}&gt;Receipt Code:&lt;/div&gt;&#10;                              &lt;div style={{&#10;                                fontFamily: 'monospace',&#10;                                fontSize: '16px',&#10;                                fontWeight: 'bold',&#10;                                letterSpacing: '2px',&#10;                                padding: '8px 12px',&#10;                                background: txn.isRedeemed ? '#fee2e2' : '#d1fae5',&#10;                                color: txn.isRedeemed ? '#991b1b' : '#065f46',&#10;                                borderRadius: '6px',&#10;                                display: 'inline-block',&#10;                                border: txn.isRedeemed ? '2px solid #fecaca' : '2px solid #86efac',&#10;                              }}&gt;&#10;                                {txn.receiptCode}&#10;                              &lt;/div&gt;&#10;                              {txn.isRedeemed &amp;&amp; (&#10;                                &lt;div style={{ fontSize: '11px', color: '#991b1b', marginTop: '4px', fontWeight: '600' }}&gt;&#10;                                  ✓ Redeemed on {new Date(txn.redeemedAt!).toLocaleString()}&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;div className={`transaction-amount ${txn.amount &gt; 0 ? 'positive' : 'negative'}`}&gt;&#10;                          {txn.amount &gt; 0 ? '+' : ''}{txn.amount} &#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'global-history' &amp;&amp; canManage &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;h3 style={{ marginBottom: '15px' }}&gt; Global Transaction History&lt;/h3&gt;&#10;              &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}&gt;&#10;                View all transactions across all members in this event&#10;              &lt;/p&gt;&#10;              {globalTransactions.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No transactions yet.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;transactions-list&quot;&gt;&#10;                  {globalTransactions.map(txn =&gt; (&#10;                    &lt;div key={txn.id} className=&quot;transaction-item&quot;&gt;&#10;                      &lt;div style={{ flex: 1 }}&gt;&#10;                        &lt;div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '5px' }}&gt;&#10;                          &lt;span style={{ fontWeight: '600', color: '#333' }}&gt;{txn.userName}&lt;/span&gt;&#10;                          &lt;span style={{&#10;                            fontSize: '11px',&#10;                            background: txn.type === 'purchase' ? '#fef3c7' : txn.amount &gt; 0 ? '#d1fae5' : '#fee2e2',&#10;                            color: txn.type === 'purchase' ? '#92400e' : txn.amount &gt; 0 ? '#065f46' : '#991b1b',&#10;                            padding: '2px 8px',&#10;                            borderRadius: '4px',&#10;                            fontWeight: '600'&#10;                          }}&gt;&#10;                            {txn.type === 'purchase' ? ' PURCHASE' : txn.amount &gt; 0 ? '➕ CREDIT' : '➖ DEBIT'}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;transaction-description&quot;&gt;&#10;                          {txn.stationName ? `Purchased: ${txn.stationName}` : txn.description}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;transaction-date&quot;&gt;{new Date(txn.createdAt).toLocaleString()}&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className={`transaction-amount ${txn.amount &gt; 0 ? 'positive' : 'negative'}`}&gt;&#10;                        {txn.amount &gt; 0 ? '+' : ''}{txn.amount} &#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {isAdmin &amp;&amp; (&#10;          &lt;div style={{ marginTop: '40px', paddingTop: '30px', borderTop: '1px solid #e0e0e0' }}&gt;&#10;            &lt;h3 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Danger Zone&lt;/h3&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '15px' }}&gt;&#10;              Manage this event's lifecycle. Archived events are hidden from your main dashboard but can be restored later.&#10;            &lt;/p&gt;&#10;            &lt;div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}&gt;&#10;              {!event.isArchived ? (&#10;                &lt;button&#10;                  onClick={handleArchiveEvent}&#10;                  style={{&#10;                    background: '#f59e0b',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: 'pointer',&#10;                    transition: 'background 0.2s'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#d97706'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#f59e0b'}&#10;                &gt;&#10;                   Archive Event&#10;                &lt;/button&gt;&#10;              ) : (&#10;                &lt;button&#10;                  onClick={handleUnarchiveEvent}&#10;                  style={{&#10;                    background: '#10b981',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: 'pointer',&#10;                    transition: 'background 0.2s'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#059669'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#10b981'}&#10;                &gt;&#10;                   Unarchive Event&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '15px', marginTop: '20px' }}&gt;&#10;              Once you delete this event, all members, tokens, shop items, and transaction history will be permanently removed. This action cannot be undone.&#10;            &lt;/p&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowDeleteModal(true)}&#10;              style={{&#10;                background: '#dc2626',&#10;                color: 'white',&#10;                padding: '12px 24px',&#10;                borderRadius: '10px',&#10;                border: 'none',&#10;                fontSize: '14px',&#10;                fontWeight: '600',&#10;                cursor: 'pointer',&#10;                transition: 'background 0.2s'&#10;              }}&#10;              onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#b91c1c'}&#10;              onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#dc2626'}&#10;            &gt;&#10;              ️ Delete Event Permanently&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {showTokenModal &amp;&amp; selectedMember &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowTokenModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Update Tokens - {selectedMember.name}&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;Current: {selectedMember.tokens} &lt;/p&gt;&#10;            &lt;form onSubmit={handleUpdateTokens}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Operation&lt;/label&gt;&#10;                &lt;select value={tokenOperation} onChange={(e) =&gt; setTokenOperation(e.target.value as 'add' | 'remove')} className=&quot;form-select&quot;&gt;&#10;                  &lt;option value=&quot;add&quot;&gt;➕ Add Tokens&lt;/option&gt;&#10;                  &lt;option value=&quot;remove&quot;&gt;➖ Remove Tokens&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Token Amount&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={tokenAmount}&#10;                  onChange={(e) =&gt; setTokenAmount(parseInt(e.target.value) || 0)}&#10;                  placeholder=&quot;Enter amount (e.g., 10)&quot;&#10;                  min=&quot;0&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowTokenModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showPromoteModal &amp;&amp; selectedMember &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowPromoteModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Change Role - {selectedMember.name}&lt;/h2&gt;&#10;            &lt;form onSubmit={handlePromote}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Role&lt;/label&gt;&#10;                &lt;select value={selectedRole} onChange={(e) =&gt; setSelectedRole(e.target.value)} className=&quot;form-select&quot;&gt;&#10;                  &lt;option value=&quot;member&quot;&gt;Member&lt;/option&gt;&#10;                  &lt;option value=&quot;manager&quot;&gt;Manager&lt;/option&gt;&#10;                  &lt;option value=&quot;admin&quot;&gt;Admin&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update Role&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowPromoteModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showStationModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Create Shop Item&lt;/h2&gt;&#10;            &lt;form onSubmit={handleCreateStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Item Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={stationName}&#10;                  onChange={(e) =&gt; setStationName(e.target.value)}&#10;                  placeholder=&quot;e.g., Premium Snack Box&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Price (Tokens)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationPrice}&#10;                  onChange={(e) =&gt; setStationPrice(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many tokens?&quot;&#10;                  min={1}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description (Optional)&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={stationDescription}&#10;                  onChange={(e) =&gt; setStationDescription(e.target.value)}&#10;                  placeholder=&quot;What can they buy?&quot;&#10;                  rows={2}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Stock Quantity&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationStock}&#10;                  onChange={(e) =&gt; setStationStock(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many in stock?&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Purchase Limit&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationPurchaseLimit}&#10;                  onChange={(e) =&gt; setStationPurchaseLimit(parseInt(e.target.value))}&#10;                  placeholder=&quot;Max purchases per member&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Image URL (Optional)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={stationImageUrl}&#10;                  onChange={(e) =&gt; setStationImageUrl(e.target.value)}&#10;                  placeholder=&quot;https://example.com/image.jpg&quot;&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Create Item&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowStationModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showEditStationModal &amp;&amp; selectedStation &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowEditStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Edit Shop Item&lt;/h2&gt;&#10;            &lt;form onSubmit={handleEditStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Item Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={editStationName}&#10;                  onChange={(e) =&gt; setEditStationName(e.target.value)}&#10;                  placeholder=&quot;e.g., Premium Snack Box&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Price (Tokens)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationPrice}&#10;                  onChange={(e) =&gt; setEditStationPrice(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many tokens?&quot;&#10;                  min={1}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Stock Quantity&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationStock}&#10;                  onChange={(e) =&gt; setEditStationStock(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many in stock?&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Purchase Limit&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationPurchaseLimit}&#10;                  onChange={(e) =&gt; setEditStationPurchaseLimit(parseInt(e.target.value))}&#10;                  placeholder=&quot;Max purchases per member&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description (Optional)&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={editStationDescription}&#10;                  onChange={(e) =&gt; setEditStationDescription(e.target.value)}&#10;                  placeholder=&quot;What can they buy?&quot;&#10;                  rows={2}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Image URL (Optional)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;url&quot;&#10;                  value={editStationImageUrl}&#10;                  onChange={(e) =&gt; setEditStationImageUrl(e.target.value)}&#10;                  placeholder=&quot;https://example.com/image.jpg&quot;&#10;                /&gt;&#10;                {editStationImageUrl &amp;&amp; (&#10;                  &lt;div style={{ marginTop: '10px' }}&gt;&#10;                    &lt;img&#10;                      src={editStationImageUrl}&#10;                      alt=&quot;Preview&quot;&#10;                      style={{&#10;                        maxWidth: '200px',&#10;                        maxHeight: '200px',&#10;                        borderRadius: '10px',&#10;                        objectFit: 'cover'&#10;                      }}&#10;                      onError={(e) =&gt; {&#10;                        e.currentTarget.style.display = 'none';&#10;                      }}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ display: 'flex', alignItems: 'center', gap: '10px', cursor: 'pointer' }}&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={editStationAvailable}&#10;                    onChange={(e) =&gt; setEditStationAvailable(e.target.checked)}&#10;                    style={{ width: 'auto', cursor: 'pointer' }}&#10;                  /&gt;&#10;                  &lt;span&gt;Available for purchase&lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update Item&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowEditStationModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showDeleteModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowDeleteModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '500px' }}&gt;&#10;            &lt;h2 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Delete Event&lt;/h2&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px', lineHeight: '1.6' }}&gt;&#10;              This will permanently delete &lt;strong&gt;&quot;{event.name}&quot;&lt;/strong&gt; and all associated data including:&#10;            &lt;/p&gt;&#10;            &lt;ul style={{ fontSize: '14px', color: '#666', marginBottom: '20px', marginLeft: '20px', lineHeight: '1.8' }}&gt;&#10;              &lt;li&gt;All {members.length} member(s) and their tokens&lt;/li&gt;&#10;              &lt;li&gt;All {shopItems.length} shop item(s)&lt;/li&gt;&#10;              &lt;li&gt;Complete transaction history&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;div style={{ background: '#fef2f2', border: '1px solid #fecaca', borderRadius: '8px', padding: '12px', marginBottom: '20px' }}&gt;&#10;              &lt;p style={{ fontSize: '13px', color: '#991b1b', margin: 0 }}&gt;&#10;                &lt;strong&gt;Warning:&lt;/strong&gt; This action cannot be undone!&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;form onSubmit={handleDeleteEvent}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ fontWeight: '600' }}&gt;Type the event name to confirm: &lt;strong&gt;{event.name}&lt;/strong&gt;&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={deleteConfirmText}&#10;                  onChange={(e) =&gt; setDeleteConfirmText(e.target.value)}&#10;                  placeholder=&quot;Enter event name exactly&quot;&#10;                  required&#10;                  style={{ fontFamily: 'monospace' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={deleteConfirmText !== event.name}&#10;                  style={{&#10;                    background: deleteConfirmText === event.name ? '#dc2626' : '#9ca3af',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: deleteConfirmText === event.name ? 'pointer' : 'not-allowed',&#10;                    flex: 1&#10;                  }}&#10;                &gt;&#10;                  Delete Event Permanently&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; {&#10;                    setShowDeleteModal(false);&#10;                    setDeleteConfirmText('');&#10;                  }}&#10;                  className=&quot;btn-secondary&quot;&#10;                  style={{ flex: 1 }}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showDeleteStationModal &amp;&amp; selectedStation &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowDeleteStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '450px' }}&gt;&#10;            &lt;h2 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Delete Shop Item&lt;/h2&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}&gt;&#10;              Are you sure you want to delete &lt;strong&gt;&quot;{selectedStation.name}&quot;&lt;/strong&gt;?&#10;            &lt;/p&gt;&#10;            &lt;div style={{ background: '#fef2f2', border: '1px solid #fecaca', borderRadius: '8px', padding: '12px', marginBottom: '20px' }}&gt;&#10;              &lt;p style={{ fontSize: '13px', color: '#991b1b', margin: 0 }}&gt;&#10;                &lt;strong&gt;Warning:&lt;/strong&gt; This action cannot be undone!&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;form onSubmit={handleDeleteStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ fontWeight: '600' }}&gt;Type the item name to confirm: &lt;strong&gt;{selectedStation.name}&lt;/strong&gt;&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={deleteStationConfirmText}&#10;                  onChange={(e) =&gt; setDeleteStationConfirmText(e.target.value)}&#10;                  placeholder=&quot;Enter item name exactly&quot;&#10;                  required&#10;                  style={{ fontFamily: 'monospace' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={deleteStationConfirmText !== selectedStation.name}&#10;                  style={{&#10;                    background: deleteStationConfirmText === selectedStation.name ? '#dc2626' : '#9ca3af',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: deleteStationConfirmText === selectedStation.name ? 'pointer' : 'not-allowed',&#10;                    flex: 1&#10;                  }}&#10;                &gt;&#10;                  Delete Item&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; {&#10;                    setShowDeleteStationModal(false);&#10;                    setDeleteStationConfirmText('');&#10;                  }}&#10;                  className=&quot;btn-secondary&quot;&#10;                  style={{ flex: 1 }}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showReceiptModal &amp;&amp; selectedReceipt &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowReceiptModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '450px', textAlign: 'center' }}&gt;&#10;            &lt;h2 style={{ color: '#059669', marginBottom: '10px' }}&gt;✓ Purchase Successful!&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;{selectedReceipt.description}&lt;/p&gt;&#10;&#10;            &lt;div style={{&#10;              background: '#f0fdf4',&#10;              border: '2px solid #86efac',&#10;              borderRadius: '12px',&#10;              padding: '20px',&#10;              marginBottom: '20px'&#10;            }}&gt;&#10;              &lt;div style={{ fontSize: '13px', color: '#666', marginBottom: '8px', fontWeight: '600' }}&gt;&#10;                YOUR RECEIPT CODE&#10;              &lt;/div&gt;&#10;              &lt;div style={{&#10;                fontFamily: 'monospace',&#10;                fontSize: '28px',&#10;                fontWeight: 'bold',&#10;                letterSpacing: '3px',&#10;                color: '#065f46',&#10;                marginBottom: '8px'&#10;              }}&gt;&#10;                {selectedReceipt.receiptCode}&#10;              &lt;/div&gt;&#10;              &lt;div style={{ fontSize: '12px', color: '#666' }}&gt;&#10;                Show this code to an admin/manager to redeem your item&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div style={{ fontSize: '13px', color: '#666', marginBottom: '15px', textAlign: 'left', background: '#f9fafb', padding: '12px', borderRadius: '8px' }}&gt;&#10;              &lt;strong&gt;Transaction Details:&lt;/strong&gt;&lt;br /&gt;&#10;              Amount: {selectedReceipt.amount} &lt;br /&gt;&#10;              Time: {new Date(selectedReceipt.createdAt).toLocaleString()}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;              &lt;button&#10;                onClick={() =&gt; {&#10;                  if (selectedReceipt.receiptCode) {&#10;                    navigator.clipboard.writeText(selectedReceipt.receiptCode);&#10;                    setSuccess('Receipt code copied to clipboard!');&#10;                  }&#10;                }}&#10;                className=&quot;btn-secondary&quot;&#10;                style={{ flex: 1 }}&#10;              &gt;&#10;                 Copy Code&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; {&#10;                  setShowReceiptModal(false);&#10;                  setSelectedReceipt(null);&#10;                }}&#10;                className=&quot;btn-primary&quot;&#10;                style={{ flex: 1 }}&#10;              &gt;&#10;                Done&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showScannerModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowScannerModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '400px' }}&gt;&#10;            &lt;h2&gt;Redeem Receipt&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;Enter the receipt ID&lt;/p&gt;&#10;            &lt;form onSubmit={handleRedeemReceipt}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Receipt ID&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={scannerInput}&#10;                  onChange={(e) =&gt; setScannerInput(e.target.value)}&#10;                  placeholder=&quot;Enter receipt ID&quot;&#10;                  required&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Redeem Receipt&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowScannerModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showSettingsModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowSettingsModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '500px' }}&gt;&#10;            &lt;h2&gt;Event Settings&lt;/h2&gt;&#10;            &lt;form onSubmit={handleUpdateEventSettings}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Event Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={settingsEventName}&#10;                  onChange={(e) =&gt; setSettingsEventName(e.target.value)}&#10;                  placeholder=&quot;Enter event name&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Join Code&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={settingsJoinCode}&#10;                  onChange={(e) =&gt; setSettingsJoinCode(e.target.value)}&#10;                  placeholder=&quot;Enter join code&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={settingsDescription}&#10;                  onChange={(e) =&gt; setSettingsDescription(e.target.value)}&#10;                  placeholder=&quot;Enter event description&quot;&#10;                  rows={3}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Save Settings&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowSettingsModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default EventDetails;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useState, useEffect, useCallback } from 'react';&#10;import { useParams, useNavigate } from 'react-router-dom';&#10;import { eventsService, EventMember, Shop, Transaction, GlobalTransaction } from '../services/events.service';&#10;&#10;const EventDetails: React.FC = () =&gt; {&#10;  const { eventId } = useParams&lt;{ eventId: string }&gt;();&#10;  const navigate = useNavigate();&#10;  const [event, setEvent] = useState&lt;any&gt;(null);&#10;  const [members, setMembers] = useState&lt;EventMember[]&gt;([]);&#10;  const [shopItems, setShopItems] = useState&lt;Shop[]&gt;([]);&#10;  const [transactions, setTransactions] = useState&lt;Transaction[]&gt;([]);&#10;  const [globalTransactions, setGlobalTransactions] = useState&lt;GlobalTransaction[]&gt;([]);&#10;  const [myRole, setMyRole] = useState('');&#10;  const [myTokens, setMyTokens] = useState(0);&#10;  const [loading, setLoading] = useState(true);&#10;  const [activeTab, setActiveTab] = useState('overview');&#10;  const [error, setError] = useState('');&#10;  const [success, setSuccess] = useState('');&#10;&#10;  const [showTokenModal, setShowTokenModal] = useState(false);&#10;  const [selectedMember, setSelectedMember] = useState&lt;EventMember | null&gt;(null);&#10;  const [tokenAmount, setTokenAmount] = useState(0);&#10;  const [tokenOperation, setTokenOperation] = useState&lt;'add' | 'remove'&gt;('add');&#10;&#10;  const [showStationModal, setShowStationModal] = useState(false);&#10;  const [stationName, setStationName] = useState('');&#10;  const [stationPrice, setStationPrice] = useState(0);&#10;  const [stationDescription, setStationDescription] = useState('');&#10;  const [stationStock, setStationStock] = useState(0);&#10;  const [stationPurchaseLimit, setStationPurchaseLimit] = useState(0);&#10;  const [stationImageUrl, setStationImageUrl] = useState('');&#10;&#10;  const [showEditStationModal, setShowEditStationModal] = useState(false);&#10;  const [selectedStation, setSelectedStation] = useState&lt;Shop | null&gt;(null);&#10;  const [editStationName, setEditStationName] = useState('');&#10;  const [editStationPrice, setEditStationPrice] = useState(0);&#10;  const [editStationDescription, setEditStationDescription] = useState('');&#10;  const [editStationStock, setEditStationStock] = useState(0);&#10;  const [editStationPurchaseLimit, setEditStationPurchaseLimit] = useState(0);&#10;  const [editStationAvailable, setEditStationAvailable] = useState(true);&#10;  const [editStationImageUrl, setEditStationImageUrl] = useState('');&#10;&#10;  const [showDeleteStationModal, setShowDeleteStationModal] = useState(false);&#10;  const [deleteStationConfirmText, setDeleteStationConfirmText] = useState('');&#10;&#10;  const [showPromoteModal, setShowPromoteModal] = useState(false);&#10;  const [selectedRole, setSelectedRole] = useState('member');&#10;&#10;  const [showDeleteModal, setShowDeleteModal] = useState(false);&#10;  const [deleteConfirmText, setDeleteConfirmText] = useState('');&#10;&#10;  const [showReceiptModal, setShowReceiptModal] = useState(false);&#10;  const [selectedReceipt, setSelectedReceipt] = useState&lt;Transaction | null&gt;(null);&#10;&#10;  const [showScannerModal, setShowScannerModal] = useState(false);&#10;  const [scannerInput, setScannerInput] = useState('');&#10;&#10;  const [showSettingsModal, setShowSettingsModal] = useState(false);&#10;  const [settingsEventName, setSettingsEventName] = useState('');&#10;  const [settingsJoinCode, setSettingsJoinCode] = useState('');&#10;  const [settingsDescription, setSettingsDescription] = useState('');&#10;&#10;  const loadEventData = useCallback(async (silent = false) =&gt; {&#10;    try {&#10;      const data = await eventsService.getEventDetails(eventId!);&#10;      setEvent(data.event);&#10;      setMembers(data.members);&#10;      setShopItems(data.stations);&#10;      setMyRole(data.myRole);&#10;      setMyTokens(data.myTokens);&#10;&#10;      const txns = await eventsService.getTransactions(eventId!);&#10;      setTransactions(txns);&#10;&#10;      // Load global transactions if user is admin or manager&#10;      if (data.myRole === 'admin' || data.myRole === 'manager') {&#10;        try {&#10;          const allTxns = await eventsService.getAllTransactions(eventId!);&#10;          setGlobalTransactions(allTxns);&#10;        } catch (err) {&#10;          // Silently fail if user doesn't have permission&#10;        }&#10;      }&#10;    } catch (err: any) {&#10;      if (!silent) {&#10;        setError(err.response?.data?.message || 'Failed to load event');&#10;      }&#10;    } finally {&#10;      if (!silent) {&#10;        setLoading(false);&#10;      }&#10;    }&#10;  }, [eventId]);&#10;&#10;  useEffect(() =&gt; {&#10;    if (eventId) {&#10;      loadEventData();&#10;&#10;      // Set up polling to refresh data every 3 seconds&#10;      const interval = setInterval(() =&gt; {&#10;        loadEventData(true); // silent refresh&#10;      }, 3000);&#10;&#10;      // Cleanup interval on unmount&#10;      return () =&gt; clearInterval(interval);&#10;    }&#10;  }, [eventId, loadEventData]);&#10;&#10;  const handleUpdateTokens = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedMember) return;&#10;&#10;    try {&#10;      const finalAmount = tokenOperation === 'remove' ? -tokenAmount : tokenAmount;&#10;      await eventsService.updateTokens(eventId!, selectedMember.userId, finalAmount);&#10;      setSuccess(`Updated tokens for ${selectedMember.name}`);&#10;      setShowTokenModal(false);&#10;      setTokenAmount(0);&#10;      setTokenOperation('add');&#10;      setSelectedMember(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update tokens');&#10;    }&#10;  };&#10;&#10;  const handlePromote = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedMember) return;&#10;&#10;    try {&#10;      await eventsService.promoteMember(eventId!, selectedMember.userId, selectedRole);&#10;      setSuccess(`Promoted ${selectedMember.name} to ${selectedRole}`);&#10;      setShowPromoteModal(false);&#10;      setSelectedMember(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to promote member');&#10;    }&#10;  };&#10;&#10;  const handleCreateStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    try {&#10;      await eventsService.createStation(eventId!, stationName, stationPrice, stationDescription, stationStock, stationImageUrl, stationPurchaseLimit || undefined);&#10;      setSuccess('Shop item created!');&#10;      setShowStationModal(false);&#10;      setStationName('');&#10;      setStationPrice(0);&#10;      setStationDescription('');&#10;      setStationStock(0);&#10;      setStationPurchaseLimit(0);&#10;      setStationImageUrl('');&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to create shop item');&#10;    }&#10;  };&#10;&#10;  const handleEditStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!selectedStation) return;&#10;&#10;    try {&#10;      await eventsService.updateStation(eventId!, selectedStation.id, {&#10;        name: editStationName,&#10;        price: editStationPrice,&#10;        description: editStationDescription,&#10;        stock: editStationStock,&#10;        purchaseLimit: editStationPurchaseLimit || undefined,&#10;        isAvailable: editStationAvailable,&#10;        imageUrl: editStationImageUrl,&#10;      });&#10;      setSuccess('Shop item updated!');&#10;      setShowEditStationModal(false);&#10;      setSelectedStation(null);&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update shop item');&#10;    }&#10;  };&#10;&#10;  const handlePurchase = async (stationId: string, stationName: string) =&gt; {&#10;    if (!window.confirm(`Purchase ${stationName}?`)) return;&#10;&#10;    try {&#10;      const receipt = await eventsService.purchase(eventId!, stationId);&#10;      setSuccess(`Successfully purchased ${stationName}!`);&#10;      setSelectedReceipt(receipt);&#10;      setShowReceiptModal(true);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Purchase failed');&#10;    }&#10;  };&#10;&#10;  const handleRedeemReceipt = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!scannerInput.trim()) return;&#10;&#10;    try {&#10;      const result = await eventsService.redeemReceipt(eventId!, scannerInput.trim());&#10;      setSuccess(`Receipt redeemed successfully! Item: ${result.transaction.itemName}, Buyer: ${result.transaction.buyerName}`);&#10;      setShowScannerModal(false);&#10;      setScannerInput('');&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to redeem receipt');&#10;    }&#10;  };&#10;&#10;  const handleDeleteEvent = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (deleteConfirmText !== event.name) {&#10;      setError('Event name does not match. Please type the exact event name.');&#10;      return;&#10;    }&#10;&#10;    try {&#10;      await eventsService.deleteEvent(eventId!);&#10;      setSuccess('Event deleted successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to delete event');&#10;    }&#10;  };&#10;&#10;  const handleDeleteStation = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (deleteStationConfirmText !== selectedStation?.name) {&#10;      setError('Shop item name does not match. Please type the exact shop item name.');&#10;      return;&#10;    }&#10;&#10;    try {&#10;      await eventsService.deleteStation(eventId!, selectedStation!.id);&#10;      setSuccess('Shop item deleted successfully.');&#10;      setShowDeleteStationModal(false);&#10;      setDeleteStationConfirmText('');&#10;      setSelectedStation(null);&#10;      await loadEventData(true); // Immediate refresh after action&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to delete shop item');&#10;    }&#10;  };&#10;&#10;  const handleArchiveEvent = async () =&gt; {&#10;    if (!window.confirm(`Archive &quot;${event.name}&quot;? It will be moved to your archived events.`)) return;&#10;&#10;    try {&#10;      await eventsService.archiveEvent(eventId!);&#10;      setSuccess('Event archived successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to archive event');&#10;    }&#10;  };&#10;&#10;  const handleUnarchiveEvent = async () =&gt; {&#10;    if (!window.confirm(`Unarchive &quot;${event.name}&quot;? It will be moved back to your active events.`)) return;&#10;&#10;    try {&#10;      await eventsService.unarchiveEvent(eventId!);&#10;      setSuccess('Event unarchived successfully. Redirecting...');&#10;      setTimeout(() =&gt; {&#10;        navigate('/dashboard');&#10;      }, 1500);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to unarchive event');&#10;    }&#10;  };&#10;&#10;  const handleUpdateEventSettings = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    setError('');&#10;    setSuccess('');&#10;&#10;    try {&#10;      await eventsService.updateEventSettings(eventId!, {&#10;        name: settingsEventName !== event.name ? settingsEventName : undefined,&#10;        joinCode: settingsJoinCode !== event.joinCode ? settingsJoinCode : undefined,&#10;        description: settingsDescription,&#10;      });&#10;      setSuccess('Event settings updated successfully!');&#10;      setShowSettingsModal(false);&#10;      await loadEventData(true);&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to update event settings');&#10;    }&#10;  };&#10;&#10;  const openTokenModal = (member: EventMember) =&gt; {&#10;    setSelectedMember(member);&#10;    setTokenAmount(0);&#10;    setTokenOperation('add');&#10;    setShowTokenModal(true);&#10;  };&#10;&#10;  const openPromoteModal = (member: EventMember) =&gt; {&#10;    setSelectedMember(member);&#10;    setSelectedRole(member.role);&#10;    setShowPromoteModal(true);&#10;  };&#10;&#10;  const openEditStationModal = (station: Shop) =&gt; {&#10;    setSelectedStation(station);&#10;    setEditStationName(station.name);&#10;    setEditStationPrice(station.price);&#10;    setEditStationDescription(station.description || '');&#10;    setEditStationStock(station.stock);&#10;    setEditStationAvailable(station.isAvailable);&#10;    setEditStationImageUrl(station.imageUrl || '');&#10;    setEditStationPurchaseLimit(station.purchaseLimit || 0);&#10;    setShowEditStationModal(true);&#10;  };&#10;&#10;  const openDeleteStationModal = (station: Shop) =&gt; {&#10;    setSelectedStation(station);&#10;    setDeleteStationConfirmText('');&#10;    setShowDeleteStationModal(true);&#10;  };&#10;&#10;  const openSettingsModal = () =&gt; {&#10;    setSettingsEventName(event.name);&#10;    setSettingsJoinCode(event.joinCode);&#10;    setSettingsDescription(event.description || '');&#10;    setShowSettingsModal(true);&#10;  };&#10;&#10;  if (loading) {&#10;    return &lt;div className=&quot;dashboard-container&quot;&gt;&lt;div className=&quot;loading&quot;&gt;Loading event...&lt;/div&gt;&lt;/div&gt;;&#10;  }&#10;&#10;  if (!event) {&#10;    return &lt;div className=&quot;dashboard-container&quot;&gt;&lt;div className=&quot;alert alert-error&quot;&gt;Event not found&lt;/div&gt;&lt;/div&gt;;&#10;  }&#10;&#10;  const canManage = myRole === 'admin' || myRole === 'manager';&#10;  const isAdmin = myRole === 'admin';&#10;  const isRegularMember = myRole === 'member';&#10;&#10;  return (&#10;    &lt;div className=&quot;dashboard-container&quot;&gt;&#10;      &lt;div className=&quot;dashboard-card&quot;&gt;&#10;        &lt;div className=&quot;dashboard-header&quot;&gt;&#10;          &lt;div&gt;&#10;            &lt;button onClick={() =&gt; navigate('/dashboard')} className=&quot;back-button&quot;&gt;← Back&lt;/button&gt;&#10;            &lt;h1 style={{ marginTop: '10px' }}&gt;{event.name}&lt;/h1&gt;&#10;            &lt;p style={{ color: '#666', fontSize: '14px' }}&gt;&#10;              Join Code: &lt;strong style={{ fontFamily: 'monospace', fontSize: '16px', letterSpacing: '1px' }}&gt;{event.joinCode}&lt;/strong&gt;&#10;              {isAdmin &amp;&amp; (&#10;                &lt;button&#10;                  onClick={openSettingsModal}&#10;                  style={{&#10;                    marginLeft: '10px',&#10;                    padding: '4px 12px',&#10;                    fontSize: '12px',&#10;                    background: '#667eea',&#10;                    color: 'white',&#10;                    border: 'none',&#10;                    borderRadius: '6px',&#10;                    cursor: 'pointer',&#10;                    fontWeight: '600'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#5a67d8'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#667eea'}&#10;                &gt;&#10;                  ⚙️ Settings&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &lt;div style={{ textAlign: 'right' }}&gt;&#10;            &lt;div style={{ fontSize: '14px', color: '#666' }}&gt;My Tokens&lt;/div&gt;&#10;            &lt;div style={{ fontSize: '32px', fontWeight: 'bold', color: '#667eea' }}&gt;{myTokens} &lt;/div&gt;&#10;            &lt;span className={`role-badge role-${myRole}`}&gt;{myRole}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; &lt;div className=&quot;alert alert-error&quot;&gt;{error}&lt;/div&gt;}&#10;        {success &amp;&amp; &lt;div className=&quot;alert alert-success&quot;&gt;{success}&lt;/div&gt;}&#10;&#10;        &lt;div className=&quot;tabs&quot;&gt;&#10;          &lt;button className={activeTab === 'overview' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('overview')}&gt;&#10;            Overview&#10;          &lt;/button&gt;&#10;          &lt;button className={activeTab === 'members' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('members')}&gt;&#10;            Members ({members.length})&#10;          &lt;/button&gt;&#10;          &lt;button className={activeTab === 'shop' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('shop')}&gt;&#10;            Shop ({shopItems.length})&#10;          &lt;/button&gt;&#10;          {canManage &amp;&amp; (&#10;            &lt;button className={activeTab === 'global-history' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('global-history')}&gt;&#10;              Transactions&#10;            &lt;/button&gt;&#10;          )}&#10;          &lt;button className={activeTab === 'history' ? 'tab active' : 'tab'} onClick={() =&gt; setActiveTab('history')}&gt;&#10;            My History&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;tab-content&quot;&gt;&#10;          {activeTab === 'overview' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div className=&quot;stats-grid&quot;&gt;&#10;                &lt;div className=&quot;stat-card&quot;&gt;&#10;                  &lt;div className=&quot;stat-value&quot;&gt;{members.length}&lt;/div&gt;&#10;                  &lt;div className=&quot;stat-label&quot;&gt;Members&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;stat-card&quot;&gt;&#10;                  &lt;div className=&quot;stat-value&quot;&gt;{shopItems.length}&lt;/div&gt;&#10;                  &lt;div className=&quot;stat-label&quot;&gt;Shop Items&lt;/div&gt;&#10;                &lt;/div&gt;&#10;                {isRegularMember &amp;&amp; (&#10;                  &lt;div className=&quot;stat-card&quot;&gt;&#10;                    &lt;div className=&quot;stat-value&quot;&gt;{myTokens}&lt;/div&gt;&#10;                    &lt;div className=&quot;stat-label&quot;&gt;My Tokens&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              &lt;h3 style={{ marginTop: '30px', marginBottom: '15px' }}&gt;Leaderboard&lt;/h3&gt;&#10;              &lt;div className=&quot;leaderboard&quot;&gt;&#10;                {members.filter(m =&gt; m.role === 'member').slice(0, 10).map((member, index) =&gt; (&#10;                  &lt;div key={member.id} className=&quot;leaderboard-item&quot;&gt;&#10;                    &lt;div className=&quot;leaderboard-rank&quot;&gt;#{index + 1}&lt;/div&gt;&#10;                    &lt;div className=&quot;leaderboard-info&quot;&gt;&#10;                      &lt;div className=&quot;leaderboard-name&quot;&gt;{member.name}&lt;/div&gt;&#10;                      &lt;span className={`role-badge role-${member.role}`}&gt;{member.role}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;leaderboard-tokens&quot;&gt;{member.tokens} &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'members' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ marginBottom: '20px' }}&gt;&#10;                &lt;h3&gt;Event Members&lt;/h3&gt;&#10;                {canManage &amp;&amp; &lt;p style={{ fontSize: '14px', color: '#666' }}&gt;You can manage tokens and roles&lt;/p&gt;}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;members-list&quot;&gt;&#10;                {members.map(member =&gt; (&#10;                  &lt;div key={member.id} className=&quot;member-card&quot;&gt;&#10;                    &lt;div&gt;&#10;                      &lt;div className=&quot;member-name&quot;&gt;{member.name}&lt;/div&gt;&#10;                      &lt;div className=&quot;member-email&quot;&gt;{member.email}&lt;/div&gt;&#10;                      &lt;span className={`role-badge role-${member.role}`}&gt;{member.role}&lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div style={{ display: 'flex', alignItems: 'center', gap: '15px' }}&gt;&#10;                      &lt;div className=&quot;member-tokens&quot;&gt;{member.tokens} &lt;/div&gt;&#10;                      {canManage &amp;&amp; (&#10;                        &lt;div style={{ display: 'flex', gap: '5px' }}&gt;&#10;                          &lt;button onClick={() =&gt; openTokenModal(member)} className=&quot;btn-small&quot;&gt;&#10;                            Tokens&#10;                          &lt;/button&gt;&#10;                          {isAdmin &amp;&amp; member.role !== 'admin' &amp;&amp; (&#10;                            &lt;button onClick={() =&gt; openPromoteModal(member)} className=&quot;btn-small btn-secondary-small&quot;&gt;&#10;                              Role&#10;                            &lt;/button&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'shop' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}&gt;&#10;                &lt;h3&gt;Shop&lt;/h3&gt;&#10;                &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                  {canManage &amp;&amp; (&#10;                    &lt;&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; navigate(`/events/${eventId}/bigscreen`)}&#10;                        className=&quot;btn-secondary&quot;&#10;                        style={{&#10;                          padding: '5px 15px',&#10;                          fontSize: '14px',&#10;                          width: 'auto',&#10;                        }}&#10;                      &gt;&#10;                         Big Screen Mode&#10;                      &lt;/button&gt;&#10;                      &lt;button&#10;                        onClick={() =&gt; setShowStationModal(true)}&#10;                        className=&quot;btn-primary&quot;&#10;                        style={{&#10;                          padding: '5px 10px',&#10;                          fontSize: '17px',&#10;                          width: 'auto',&#10;                          float: 'right'&#10;                        }}&#10;                      &gt;&#10;                        + New Item&#10;                      &lt;/button&gt;&#10;                    &lt;/&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;&#10;              {shopItems.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No shop items yet.&lt;/p&gt;&#10;                  {canManage &amp;&amp; &lt;p style={{ color: '#999', fontSize: '14px', marginTop: '10px' }}&gt;Create one to let members spend their tokens!&lt;/p&gt;}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;stations-grid&quot;&gt;&#10;                  {shopItems.map(station =&gt; (&#10;                    &lt;div key={station.id} className=&quot;station-card&quot;&gt;&#10;                      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '8px' }}&gt;&#10;                        &lt;h4 style={{ margin: 0, flex: 1 }}&gt;{station.name}&lt;/h4&gt;&#10;                        {canManage &amp;&amp; (&#10;                          &lt;div style={{ display: 'flex', gap: '5px' }}&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; openEditStationModal(station)}&#10;                              className=&quot;btn-small&quot;&#10;                              style={{ fontSize: '12px', padding: '4px 8px' }}&#10;                            &gt;&#10;                              ✏️&#10;                            &lt;/button&gt;&#10;                            &lt;button&#10;                              onClick={() =&gt; openDeleteStationModal(station)}&#10;                              className=&quot;btn-small btn-secondary-small&quot;&#10;                              style={{ fontSize: '12px', padding: '4px 8px', background: '#dc2626' }}&#10;                              onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#b91c1c'}&#10;                              onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#dc2626'}&#10;                            &gt;&#10;                              ️&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      {station.description &amp;&amp; &lt;p className=&quot;station-description&quot;&gt;{station.description}&lt;/p&gt;}&#10;                      &lt;div style={{ fontSize: '13px', color: '#666', marginTop: '8px', marginBottom: '8px' }}&gt;&#10;                        Stock: &lt;strong style={{ color: station.stock &gt; 0 ? '#059669' : '#dc2626' }}&gt;&#10;                          {station.stock &gt; 0 ? `${station.stock} available` : 'Out of stock'}&#10;                        &lt;/strong&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;station-footer&quot;&gt;&#10;                        &lt;div className=&quot;station-price&quot;&gt;{station.price} &lt;/div&gt;&#10;                        {station.isAvailable &amp;&amp; isRegularMember &amp;&amp; (&#10;                          &lt;button&#10;                            onClick={() =&gt; handlePurchase(station.id, station.name)}&#10;                            className=&quot;btn-purchase&quot;&#10;                            disabled={myTokens &lt; station.price || station.stock &lt;= 0}&#10;                          &gt;&#10;                            {station.stock &lt;= 0 ? 'Out of Stock' : myTokens &lt; station.price ? 'Insufficient Tokens' : 'Purchase'}&#10;                          &lt;/button&gt;&#10;                        )}&#10;                        {!isRegularMember &amp;&amp; (&#10;                          &lt;span style={{ fontSize: '12px', color: '#999', fontStyle: 'italic' }}&gt;&#10;                            Members only&#10;                          &lt;/span&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'history' &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}&gt;&#10;                &lt;h3 style={{ margin: 0 }}&gt;Transaction History&lt;/h3&gt;&#10;                {canManage &amp;&amp; (&#10;                  &lt;button&#10;                    onClick={() =&gt; setShowScannerModal(true)}&#10;                    className=&quot;btn-primary&quot;&#10;                    style={{&#10;                      padding: '8px 16px',&#10;                      fontSize: '14px',&#10;                      width: 'auto',&#10;                    }}&#10;                  &gt;&#10;                     Redeem Receipt&#10;                  &lt;/button&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              {transactions.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No transactions yet.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;transactions-list&quot;&gt;&#10;                  {transactions.map(txn =&gt; (&#10;                    &lt;div key={txn.id} className=&quot;transaction-item&quot; style={{ flexDirection: 'column', alignItems: 'stretch', gap: '10px' }}&gt;&#10;                      &lt;div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start' }}&gt;&#10;                        &lt;div&gt;&#10;                          &lt;div className=&quot;transaction-description&quot;&gt;{txn.description}&lt;/div&gt;&#10;                          &lt;div className=&quot;transaction-date&quot;&gt;{new Date(txn.createdAt).toLocaleString()}&lt;/div&gt;&#10;                          {txn.type === 'purchase' &amp;&amp; txn.receiptCode &amp;&amp; (&#10;                            &lt;div style={{ marginTop: '8px' }}&gt;&#10;                              &lt;div style={{ fontSize: '11px', color: '#666', marginBottom: '4px' }}&gt;Receipt Code:&lt;/div&gt;&#10;                              &lt;div style={{&#10;                                fontFamily: 'monospace',&#10;                                fontSize: '16px',&#10;                                fontWeight: 'bold',&#10;                                letterSpacing: '2px',&#10;                                padding: '8px 12px',&#10;                                background: txn.isRedeemed ? '#fee2e2' : '#d1fae5',&#10;                                color: txn.isRedeemed ? '#991b1b' : '#065f46',&#10;                                borderRadius: '6px',&#10;                                display: 'inline-block',&#10;                                border: txn.isRedeemed ? '2px solid #fecaca' : '2px solid #86efac',&#10;                              }}&gt;&#10;                                {txn.receiptCode}&#10;                              &lt;/div&gt;&#10;                              {txn.isRedeemed &amp;&amp; (&#10;                                &lt;div style={{ fontSize: '11px', color: '#991b1b', marginTop: '4px', fontWeight: '600' }}&gt;&#10;                                  ✓ Redeemed on {new Date(txn.redeemedAt!).toLocaleString()}&#10;                                &lt;/div&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;div className={`transaction-amount ${txn.amount &gt; 0 ? 'positive' : 'negative'}`}&gt;&#10;                          {txn.amount &gt; 0 ? '+' : ''}{txn.amount} &#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'global-history' &amp;&amp; canManage &amp;&amp; (&#10;            &lt;div&gt;&#10;              &lt;h3 style={{ marginBottom: '15px' }}&gt; Global Transaction History&lt;/h3&gt;&#10;              &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}&gt;&#10;                View all transactions across all members in this event&#10;              &lt;/p&gt;&#10;              {globalTransactions.length === 0 ? (&#10;                &lt;div style={{ textAlign: 'center', padding: '40px', background: '#f9f9f9', borderRadius: '10px' }}&gt;&#10;                  &lt;p style={{ color: '#666' }}&gt;No transactions yet.&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;transactions-list&quot;&gt;&#10;                  {globalTransactions.map(txn =&gt; (&#10;                    &lt;div key={txn.id} className=&quot;transaction-item&quot;&gt;&#10;                      &lt;div style={{ flex: 1 }}&gt;&#10;                        &lt;div style={{ display: 'flex', alignItems: 'center', gap: '10px', marginBottom: '5px' }}&gt;&#10;                          &lt;span style={{ fontWeight: '600', color: '#333' }}&gt;{txn.userName}&lt;/span&gt;&#10;                          &lt;span style={{&#10;                            fontSize: '11px',&#10;                            background: txn.type === 'purchase' ? '#fef3c7' : txn.amount &gt; 0 ? '#d1fae5' : '#fee2e2',&#10;                            color: txn.type === 'purchase' ? '#92400e' : txn.amount &gt; 0 ? '#065f46' : '#991b1b',&#10;                            padding: '2px 8px',&#10;                            borderRadius: '4px',&#10;                            fontWeight: '600'&#10;                          }}&gt;&#10;                            {txn.type === 'purchase' ? ' PURCHASE' : txn.amount &gt; 0 ? '➕ CREDIT' : '➖ DEBIT'}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;transaction-description&quot;&gt;&#10;                          {txn.stationName ? `Purchased: ${txn.stationName}` : txn.description}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;transaction-date&quot;&gt;{new Date(txn.createdAt).toLocaleString()}&lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;div className={`transaction-amount ${txn.amount &gt; 0 ? 'positive' : 'negative'}`}&gt;&#10;                        {txn.amount &gt; 0 ? '+' : ''}{txn.amount} &#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {isAdmin &amp;&amp; (&#10;          &lt;div style={{ marginTop: '40px', paddingTop: '30px', borderTop: '1px solid #e0e0e0' }}&gt;&#10;            &lt;h3 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Danger Zone&lt;/h3&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '15px' }}&gt;&#10;              Manage this event's lifecycle. Archived events are hidden from your main dashboard but can be restored later.&#10;            &lt;/p&gt;&#10;            &lt;div style={{ display: 'flex', gap: '10px', marginBottom: '15px' }}&gt;&#10;              {!event.isArchived ? (&#10;                &lt;button&#10;                  onClick={handleArchiveEvent}&#10;                  style={{&#10;                    background: '#f59e0b',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: 'pointer',&#10;                    transition: 'background 0.2s'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#d97706'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#f59e0b'}&#10;                &gt;&#10;                   Archive Event&#10;                &lt;/button&gt;&#10;              ) : (&#10;                &lt;button&#10;                  onClick={handleUnarchiveEvent}&#10;                  style={{&#10;                    background: '#10b981',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: 'pointer',&#10;                    transition: 'background 0.2s'&#10;                  }}&#10;                  onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#059669'}&#10;                  onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#10b981'}&#10;                &gt;&#10;                   Unarchive Event&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '15px', marginTop: '20px' }}&gt;&#10;              Once you delete this event, all members, tokens, shop items, and transaction history will be permanently removed. This action cannot be undone.&#10;            &lt;/p&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowDeleteModal(true)}&#10;              style={{&#10;                background: '#dc2626',&#10;                color: 'white',&#10;                padding: '12px 24px',&#10;                borderRadius: '10px',&#10;                border: 'none',&#10;                fontSize: '14px',&#10;                fontWeight: '600',&#10;                cursor: 'pointer',&#10;                transition: 'background 0.2s'&#10;              }}&#10;              onMouseEnter={(e) =&gt; e.currentTarget.style.background = '#b91c1c'}&#10;              onMouseLeave={(e) =&gt; e.currentTarget.style.background = '#dc2626'}&#10;            &gt;&#10;              ️ Delete Event Permanently&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {showTokenModal &amp;&amp; selectedMember &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowTokenModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Update Tokens - {selectedMember.name}&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;Current: {selectedMember.tokens} &lt;/p&gt;&#10;            &lt;form onSubmit={handleUpdateTokens}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Operation&lt;/label&gt;&#10;                &lt;select value={tokenOperation} onChange={(e) =&gt; setTokenOperation(e.target.value as 'add' | 'remove')} className=&quot;form-select&quot;&gt;&#10;                  &lt;option value=&quot;add&quot;&gt;➕ Add Tokens&lt;/option&gt;&#10;                  &lt;option value=&quot;remove&quot;&gt;➖ Remove Tokens&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Token Amount&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={tokenAmount}&#10;                  onChange={(e) =&gt; setTokenAmount(parseInt(e.target.value) || 0)}&#10;                  placeholder=&quot;Enter amount (e.g., 10)&quot;&#10;                  min=&quot;0&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowTokenModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showPromoteModal &amp;&amp; selectedMember &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowPromoteModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Change Role - {selectedMember.name}&lt;/h2&gt;&#10;            &lt;form onSubmit={handlePromote}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Role&lt;/label&gt;&#10;                &lt;select value={selectedRole} onChange={(e) =&gt; setSelectedRole(e.target.value)} className=&quot;form-select&quot;&gt;&#10;                  &lt;option value=&quot;member&quot;&gt;Member&lt;/option&gt;&#10;                  &lt;option value=&quot;manager&quot;&gt;Manager&lt;/option&gt;&#10;                  &lt;option value=&quot;admin&quot;&gt;Admin&lt;/option&gt;&#10;                &lt;/select&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update Role&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowPromoteModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showStationModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Create Shop Item&lt;/h2&gt;&#10;            &lt;form onSubmit={handleCreateStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Item Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={stationName}&#10;                  onChange={(e) =&gt; setStationName(e.target.value)}&#10;                  placeholder=&quot;e.g., Premium Snack Box&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Price (Tokens)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationPrice}&#10;                  onChange={(e) =&gt; setStationPrice(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many tokens?&quot;&#10;                  min={1}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description (Optional)&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={stationDescription}&#10;                  onChange={(e) =&gt; setStationDescription(e.target.value)}&#10;                  placeholder=&quot;What can they buy?&quot;&#10;                  rows={2}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Stock Quantity&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationStock}&#10;                  onChange={(e) =&gt; setStationStock(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many in stock?&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Purchase Limit&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={stationPurchaseLimit}&#10;                  onChange={(e) =&gt; setStationPurchaseLimit(parseInt(e.target.value))}&#10;                  placeholder=&quot;Max purchases per member&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Image URL (Optional)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={stationImageUrl}&#10;                  onChange={(e) =&gt; setStationImageUrl(e.target.value)}&#10;                  placeholder=&quot;https://example.com/image.jpg&quot;&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Create Item&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowStationModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showEditStationModal &amp;&amp; selectedStation &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowEditStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()}&gt;&#10;            &lt;h2&gt;Edit Shop Item&lt;/h2&gt;&#10;            &lt;form onSubmit={handleEditStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Item Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={editStationName}&#10;                  onChange={(e) =&gt; setEditStationName(e.target.value)}&#10;                  placeholder=&quot;e.g., Premium Snack Box&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Price (Tokens)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationPrice}&#10;                  onChange={(e) =&gt; setEditStationPrice(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many tokens?&quot;&#10;                  min={1}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Stock Quantity&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationStock}&#10;                  onChange={(e) =&gt; setEditStationStock(parseInt(e.target.value))}&#10;                  placeholder=&quot;How many in stock?&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Purchase Limit&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;number&quot;&#10;                  value={editStationPurchaseLimit}&#10;                  onChange={(e) =&gt; setEditStationPurchaseLimit(parseInt(e.target.value))}&#10;                  placeholder=&quot;Max purchases per member&quot;&#10;                  min={0}&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description (Optional)&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={editStationDescription}&#10;                  onChange={(e) =&gt; setEditStationDescription(e.target.value)}&#10;                  placeholder=&quot;What can they buy?&quot;&#10;                  rows={2}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Image URL (Optional)&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;url&quot;&#10;                  value={editStationImageUrl}&#10;                  onChange={(e) =&gt; setEditStationImageUrl(e.target.value)}&#10;                  placeholder=&quot;https://example.com/image.jpg&quot;&#10;                /&gt;&#10;                {editStationImageUrl &amp;&amp; (&#10;                  &lt;div style={{ marginTop: '10px' }}&gt;&#10;                    &lt;img&#10;                      src={editStationImageUrl}&#10;                      alt=&quot;Preview&quot;&#10;                      style={{&#10;                        maxWidth: '200px',&#10;                        maxHeight: '200px',&#10;                        borderRadius: '10px',&#10;                        objectFit: 'cover'&#10;                      }}&#10;                      onError={(e) =&gt; {&#10;                        e.currentTarget.style.display = 'none';&#10;                      }}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ display: 'flex', alignItems: 'center', gap: '10px', cursor: 'pointer' }}&gt;&#10;                  &lt;input&#10;                    type=&quot;checkbox&quot;&#10;                    checked={editStationAvailable}&#10;                    onChange={(e) =&gt; setEditStationAvailable(e.target.checked)}&#10;                    style={{ width: 'auto', cursor: 'pointer' }}&#10;                  /&gt;&#10;                  &lt;span&gt;Available for purchase&lt;/span&gt;&#10;                &lt;/label&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Update Item&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowEditStationModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showDeleteModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowDeleteModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '500px' }}&gt;&#10;            &lt;h2 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Delete Event&lt;/h2&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px', lineHeight: '1.6' }}&gt;&#10;              This will permanently delete &lt;strong&gt;&quot;{event.name}&quot;&lt;/strong&gt; and all associated data including:&#10;            &lt;/p&gt;&#10;            &lt;ul style={{ fontSize: '14px', color: '#666', marginBottom: '20px', marginLeft: '20px', lineHeight: '1.8' }}&gt;&#10;              &lt;li&gt;All {members.length} member(s) and their tokens&lt;/li&gt;&#10;              &lt;li&gt;All {shopItems.length} shop item(s)&lt;/li&gt;&#10;              &lt;li&gt;Complete transaction history&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;div style={{ background: '#fef2f2', border: '1px solid #fecaca', borderRadius: '8px', padding: '12px', marginBottom: '20px' }}&gt;&#10;              &lt;p style={{ fontSize: '13px', color: '#991b1b', margin: 0 }}&gt;&#10;                &lt;strong&gt;Warning:&lt;/strong&gt; This action cannot be undone!&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;form onSubmit={handleDeleteEvent}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ fontWeight: '600' }}&gt;Type the event name to confirm: &lt;strong&gt;{event.name}&lt;/strong&gt;&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={deleteConfirmText}&#10;                  onChange={(e) =&gt; setDeleteConfirmText(e.target.value)}&#10;                  placeholder=&quot;Enter event name exactly&quot;&#10;                  required&#10;                  style={{ fontFamily: 'monospace' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={deleteConfirmText !== event.name}&#10;                  style={{&#10;                    background: deleteConfirmText === event.name ? '#dc2626' : '#9ca3af',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: deleteConfirmText === event.name ? 'pointer' : 'not-allowed',&#10;                    flex: 1&#10;                  }}&#10;                &gt;&#10;                  Delete Event Permanently&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; {&#10;                    setShowDeleteModal(false);&#10;                    setDeleteConfirmText('');&#10;                  }}&#10;                  className=&quot;btn-secondary&quot;&#10;                  style={{ flex: 1 }}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showDeleteStationModal &amp;&amp; selectedStation &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowDeleteStationModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '450px' }}&gt;&#10;            &lt;h2 style={{ color: '#dc2626', marginBottom: '10px' }}&gt;⚠️ Delete Shop Item&lt;/h2&gt;&#10;            &lt;p style={{ fontSize: '14px', color: '#666', marginBottom: '20px' }}&gt;&#10;              Are you sure you want to delete &lt;strong&gt;&quot;{selectedStation.name}&quot;&lt;/strong&gt;?&#10;            &lt;/p&gt;&#10;            &lt;div style={{ background: '#fef2f2', border: '1px solid #fecaca', borderRadius: '8px', padding: '12px', marginBottom: '20px' }}&gt;&#10;              &lt;p style={{ fontSize: '13px', color: '#991b1b', margin: 0 }}&gt;&#10;                &lt;strong&gt;Warning:&lt;/strong&gt; This action cannot be undone!&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;form onSubmit={handleDeleteStation}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label style={{ fontWeight: '600' }}&gt;Type the item name to confirm: &lt;strong&gt;{selectedStation.name}&lt;/strong&gt;&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={deleteStationConfirmText}&#10;                  onChange={(e) =&gt; setDeleteStationConfirmText(e.target.value)}&#10;                  placeholder=&quot;Enter item name exactly&quot;&#10;                  required&#10;                  style={{ fontFamily: 'monospace' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button&#10;                  type=&quot;submit&quot;&#10;                  disabled={deleteStationConfirmText !== selectedStation.name}&#10;                  style={{&#10;                    background: deleteStationConfirmText === selectedStation.name ? '#dc2626' : '#9ca3af',&#10;                    color: 'white',&#10;                    padding: '12px 24px',&#10;                    borderRadius: '10px',&#10;                    border: 'none',&#10;                    fontSize: '14px',&#10;                    fontWeight: '600',&#10;                    cursor: deleteStationConfirmText === selectedStation.name ? 'pointer' : 'not-allowed',&#10;                    flex: 1&#10;                  }}&#10;                &gt;&#10;                  Delete Item&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; {&#10;                    setShowDeleteStationModal(false);&#10;                    setDeleteStationConfirmText('');&#10;                  }}&#10;                  className=&quot;btn-secondary&quot;&#10;                  style={{ flex: 1 }}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showReceiptModal &amp;&amp; selectedReceipt &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowReceiptModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '450px', textAlign: 'center' }}&gt;&#10;            &lt;h2 style={{ color: '#059669', marginBottom: '10px' }}&gt;✓ Purchase Successful!&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;{selectedReceipt.description}&lt;/p&gt;&#10;&#10;            &lt;div style={{&#10;              background: '#f0fdf4',&#10;              border: '2px solid #86efac',&#10;              borderRadius: '12px',&#10;              padding: '20px',&#10;              marginBottom: '20px'&#10;            }}&gt;&#10;              &lt;div style={{ fontSize: '13px', color: '#666', marginBottom: '8px', fontWeight: '600' }}&gt;&#10;                YOUR RECEIPT CODE&#10;              &lt;/div&gt;&#10;              &lt;div style={{&#10;                fontFamily: 'monospace',&#10;                fontSize: '28px',&#10;                fontWeight: 'bold',&#10;                letterSpacing: '3px',&#10;                color: '#065f46',&#10;                marginBottom: '8px'&#10;              }}&gt;&#10;                {selectedReceipt.receiptCode}&#10;              &lt;/div&gt;&#10;              &lt;div style={{ fontSize: '12px', color: '#666' }}&gt;&#10;                Show this code to an admin/manager to redeem your item&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div style={{ fontSize: '13px', color: '#666', marginBottom: '15px', textAlign: 'left', background: '#f9fafb', padding: '12px', borderRadius: '8px' }}&gt;&#10;              &lt;strong&gt;Transaction Details:&lt;/strong&gt;&lt;br /&gt;&#10;              Amount: {selectedReceipt.amount} &lt;br /&gt;&#10;              Time: {new Date(selectedReceipt.createdAt).toLocaleString()}&#10;            &lt;/div&gt;&#10;&#10;            &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;              &lt;button&#10;                onClick={() =&gt; {&#10;                  if (selectedReceipt.receiptCode) {&#10;                    navigator.clipboard.writeText(selectedReceipt.receiptCode);&#10;                    setSuccess('Receipt code copied to clipboard!');&#10;                  }&#10;                }}&#10;                className=&quot;btn-secondary&quot;&#10;                style={{ flex: 1 }}&#10;              &gt;&#10;                 Copy Code&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; {&#10;                  setShowReceiptModal(false);&#10;                  setSelectedReceipt(null);&#10;                }}&#10;                className=&quot;btn-primary&quot;&#10;                style={{ flex: 1 }}&#10;              &gt;&#10;                Done&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showScannerModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowScannerModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '400px' }}&gt;&#10;            &lt;h2&gt;Redeem Receipt&lt;/h2&gt;&#10;            &lt;p style={{ color: '#666', marginBottom: '20px' }}&gt;Enter the receipt ID&lt;/p&gt;&#10;            &lt;form onSubmit={handleRedeemReceipt}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Receipt ID&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={scannerInput}&#10;                  onChange={(e) =&gt; setScannerInput(e.target.value)}&#10;                  placeholder=&quot;Enter receipt ID&quot;&#10;                  required&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Redeem Receipt&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowScannerModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {showSettingsModal &amp;&amp; (&#10;        &lt;div className=&quot;modal-overlay&quot; onClick={() =&gt; setShowSettingsModal(false)}&gt;&#10;          &lt;div className=&quot;modal-content&quot; onClick={(e) =&gt; e.stopPropagation()} style={{ maxWidth: '500px' }}&gt;&#10;            &lt;h2&gt;Event Settings&lt;/h2&gt;&#10;            &lt;form onSubmit={handleUpdateEventSettings}&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Event Name&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={settingsEventName}&#10;                  onChange={(e) =&gt; setSettingsEventName(e.target.value)}&#10;                  placeholder=&quot;Enter event name&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Join Code&lt;/label&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  value={settingsJoinCode}&#10;                  onChange={(e) =&gt; setSettingsJoinCode(e.target.value)}&#10;                  placeholder=&quot;Enter join code&quot;&#10;                  required&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;form-group&quot;&gt;&#10;                &lt;label&gt;Description&lt;/label&gt;&#10;                &lt;textarea&#10;                  value={settingsDescription}&#10;                  onChange={(e) =&gt; setSettingsDescription(e.target.value)}&#10;                  placeholder=&quot;Enter event description&quot;&#10;                  rows={3}&#10;                  style={{ width: '100%', padding: '12px', borderRadius: '10px', border: '2px solid #e0e0e0' }}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;div style={{ display: 'flex', gap: '10px' }}&gt;&#10;                &lt;button type=&quot;submit&quot; className=&quot;btn-primary&quot;&gt;Save Settings&lt;/button&gt;&#10;                &lt;button type=&quot;button&quot; onClick={() =&gt; setShowSettingsModal(false)} className=&quot;btn-secondary&quot;&gt;Cancel&lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default EventDetails;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>